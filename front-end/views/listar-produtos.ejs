<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Listar Produtos</title>

    <link rel="stylesheet" href="https://cdn.datatables.net/2.3.1/css/dataTables.dataTables.min.css">
    <link rel="stylesheet" href="/styles/listar.css">
</head>

<body>
    <header>
        <h1>Listar Produtos</h1>
        <h2>Acompanhe aqui o cadastro de todos os seus produtos</h2>
    </header>

    <main>
        <section class="tabela-container">
            <table id="tabela" class="display">
                <thead>
                    <tr>
                        <th>Código Produto</th>
                        <th>Código de Barras</th>
                        <th>Nome Produto</th>
                        <th>Unidade de Medida</th>
                        <th>Valor de Custo</th>
                        <th>Porcentagem Lucro</th>
                        <th>Valor de Venda</th>
                        <th>Estoque Atual</th>
                        <th>Estoque Mínimo</th>
                        <th>Fornecedor</th>
                        <th>Ações</th>
                    </tr>
                </thead>
            </table>
        </section>

        <div class="button-group">
            <button onclick="window.location.href='/'">Voltar</button>
        </div>
    </main>

    <footer>
        <p>&copy; 2025 Raffi Estoque</p>
    </footer>
</body>

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="http://cdn.datatables.net/2.3.1/js/dataTables.min.js"></script>
<script>
    let table = new DataTable('#tabela', {
        language: {
            decimal: ",",
            thousands: ".",
            search: "Buscar:",
            lengthMenu: "Mostrar _MENU_ registros por página",
            zeroRecords: "Nenhum produto encontrado",
            info: "Mostrando _START_ a _END_ de _TOTAL_ registros",
            infoEmpty: "Nenhum registro disponível",
            infoFiltered: "(filtrado de _MAX_ registros no total)",
            paginate: {
                first: "Primeira",
                last: "Última",
                next: "Próxima",
                previous: "Anterior"
            },
            emptyTable: "Nenhum produto cadastrado"
        }
    });

    window.onload = () => {
        fetch('/produtos/listar-produtos-backend')
            .then(res => res.json())
            .then(async data => {
                if (data && Array.isArray(data)) {
                    const table = $('#tabela').DataTable();

                    for (const produto of data) {
                        const nomeFornecedor = await buscarNomeFornecedor(produto.codFornecedor);

                        const row = [
                            produto.codProduto || '',
                            produto.codigoBarras || '',
                            produto.nomeProduto || '',
                            produto.unidadeMedida || '',
                            produto.valorCusto != null ? `R$ ${produto.valorCusto}` : '',
                            produto.porcentagemLucro != null ? `${produto.porcentagemLucro}%` : '',
                            produto.valorVenda != null ? `R$ ${produto.valorVenda}` : '',
                            produto.estoqueAtual || '',
                            produto.estoqueMinimo || '',
                            nomeFornecedor || '',
                            `<button class="btn-excluir" data-id="${produto.codProduto}">Excluir</button> <button class="btn-editar" data-id="${produto.codProduto}">Editar</button>`
                        ];

                        const newRow = table.row.add(row).draw().node();

                        const headers = [
                            'Código Produto', 'Código de Barras', 'Nome Produto', 'Unidade de Medida', 'Valor de Custo',
                            'Porcentagem Lucro', 'Valor de Venda', 'Estoque Atual', 'Estoque Mínimo', 'Fornecedor', 'Ações'
                        ];

                        $(newRow).find('td').each(function (index) {
                            $(this).attr('data-label', headers[index]);
                        });
                    }
                } else {
                    console.error('Erro ao buscar produtos:', data.error || 'Resposta inesperada');
                }
            })
            .catch(error => {
                console.error('Erro de requisição:', error);
            });
    };

    $('#tabela').on('click', '.btn-excluir', function () {
        const id = $(this).data('id');

        if (confirm('Deseja realmente excluir este produto?')) {
            fetch(`/produtos/deletar-produto-backend/${id}`, {
                method: 'DELETE'
            })
                .then(res => {
                    if (!res.ok) throw new Error('Erro ao excluir');
                    return res.json();
                })
                .then(result => {
                    alert('Produto excluído com sucesso!');
                    $('#tabela').DataTable().row($(this).parents('tr')).remove().draw();
                })
                .catch(err => {
                    console.error('Erro:', err);
                    alert('Erro ao excluir produto.');
                });
        }
    });

    $('#tabela').on('click', '.btn-editar', function () {
        const $btn = $(this);
        const $row = $btn.closest('tr');

        if ($btn.text() === 'Editar') {
            const codigoBarrasTd = $row.find('td').eq(1);
            const nomeProdutoTd = $row.find('td').eq(2);
            const unidadeMedidaTd = $row.find('td').eq(3);
            const valorCustoTd = $row.find('td').eq(4);
            const porcentagemLucroTd = $row.find('td').eq(5);
            const valorVendaTd = $row.find('td').eq(6);
            const estoqueAtualTd = $row.find('td').eq(7);
            const estoqueMinimoTd = $row.find('td').eq(8);

            const codigoBarrasVal = codigoBarrasTd.text();
            const nomeProdutoVal = nomeProdutoTd.text();
            const unidadeMedidaVal = unidadeMedidaTd.text();
            const valorCustoVal = valorCustoTd.text();
            const porcentagemLucroVal = porcentagemLucroTd.text();
            const valorVendaVal = valorVendaTd.text();
            const estoqueAtualVal = estoqueAtualTd.text();
            const estoqueMinimoVal = estoqueMinimoTd.text();

            codigoBarrasTd.html(`<input type="text" value="${codigoBarrasVal}" />`);
            nomeProdutoTd.html(`<input type="text" value="${nomeProdutoVal}" />`);

            unidadeMedidaTd.html(`<select id="unidadeMedida" name="unidadeMedida ">
                                    <option value="Unidade">Unitário</option>
                                    <option value="Kg">Kg</option>
                                    <option value="Metro">Metro</option>
                                </select>`);
            valorCustoTd.html(`<input type="text" id="valorCusto" value="${valorCustoVal.replace("R$ ", "")}" />`);
            porcentagemLucroTd.html(`<input type="number" id="porcentagemLucro" value="${porcentagemLucroVal.replace("%", "")}" />`);
            valorVendaTd.html(`<input type="text" id="valorVenda" value="${valorVendaVal.replace("R$ ", "")}" />`);

            const valorCustoInput = document.getElementById('valorCusto');
            const porcentagemLucroInput = document.getElementById('porcentagemLucro');
            const valorVendaInput = document.getElementById('valorVenda');

            function atualizarValorVenda() {
                const valorCusto = parseFloat(valorCustoInput.value);
                const porcentagemLucro = parseFloat(porcentagemLucroInput.value);

                if (valorCustoInput.value === '') {
                    valorVendaInput.value = '';
                    return;
                }

                if (!isNaN(valorCusto) && !isNaN(porcentagemLucro)) {
                    const resto = ((100 - porcentagemLucro) / 100);
                    const valorVenda = valorCusto / resto;
                    valorVendaInput.value = valorVenda.toFixed(2);
                }
            }

            porcentagemLucroInput.addEventListener('input', atualizarValorVenda);
            valorCustoInput.addEventListener('input', atualizarValorVenda);

            estoqueAtualTd.html(`<input type="text" value="${estoqueAtualVal}" />`);
            estoqueMinimoTd.html(`<input type="text" value="${estoqueMinimoVal}" />`);

            $btn.text('Confirmar');
            $btn.after(`<button class="btn-cancelar" data-id="${$btn.data('id')}">Cancelar</button>`);
        } else {
            const id = $btn.data('id');
            const $row = $btn.closest('tr');

            const codigoBarras = $row.find('td').eq(1).find('input').val();
            const nomeProduto = $row.find('td').eq(2).find('input').val();
            const unidadeMedida = $row.find('td').eq(3).find('select').val();
            const valorCusto = $row.find('td').eq(4).find('input').val();
            const porcentagemLucro = $row.find('td').eq(5).find('input').val();
            const valorVenda = $row.find('td').eq(6).find('input').val();
            const estoqueAtual = $row.find('td').eq(7).find('input').val();
            const estoqueMinimo = $row.find('td').eq(8).find('input').val();

            if (estoqueAtual < estoqueMinimo) {
                alert('O estoque atual não pode ser menor que o estoque mínimo.');
                return;
            }

            if (estoqueMinimo > estoqueAtual) {
                alert('O estoque mínimo não pode ser maior que o estoque atual.');
                return;
            }

            if (porcentagemLucro <= 0 || isNaN(porcentagemLucro)) {
                alert('Informe uma porcentagem de lucro válida.');
                return;
            }

            const dadosAtualizados = { codigoBarras, nomeProduto, unidadeMedida, valorCusto, porcentagemLucro, valorVenda, estoqueAtual, estoqueMinimo };

            fetch(`/produtos/atualizar-produto-backend/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dadosAtualizados)
            })
                .then(res => {
                    if (!res.ok) throw new Error('Erro ao atualizar');
                    return res.json();
                })
                .then(() => {
                    alert('Produto atualizado com sucesso!');
                    $row.find('td').eq(1).text(codigoBarras);
                    $row.find('td').eq(2).text(nomeProduto);
                    $row.find('td').eq(3).text(unidadeMedida);
                    $row.find('td').eq(4).text(valorCusto);
                    $row.find('td').eq(5).text(`${porcentagemLucro}%`);
                    $row.find('td').eq(6).text(valorVenda);
                    $row.find('td').eq(7).text(estoqueAtual);
                    $row.find('td').eq(8).text(estoqueMinimo);

                    $btn.text('Editar');
                    $row.find('.btn-cancelar').remove();
                })
                .catch(err => {
                    console.error(err);
                    alert('Erro ao atualizar produto.');
                });
        }
    });

    $('#tabela').on('click', '.btn-cancelar', function () {
        const $row = $(this).closest('tr');
        const $editarBtn = $row.find('.btn-editar');

        const codigoBarras = $row.find('td').eq(1).find('input').attr('value');
        const nomeProduto = $row.find('td').eq(2).find('input').attr('value');
        const unidadeMedida = $row.find('td').eq(3).find('option').attr('value');
        const valorCusto = $row.find('td').eq(4).find('input').attr('value');
        const porcentagemLucro = $row.find('td').eq(5).find('input').attr('value');
        const valorVenda = $row.find('td').eq(6).find('input').attr('value');
        const estoqueAtual = $row.find('td').eq(7).find('input').attr('value');
        const estoqueMinimo = $row.find('td').eq(8).find('input').attr('value');

        $row.find('td').eq(1).text(codigoBarras);
        $row.find('td').eq(2).text(nomeProduto);
        $row.find('td').eq(3).text(unidadeMedida);
        $row.find('td').eq(4).text(`R$ ${valorCusto}`);
        $row.find('td').eq(5).text(`${porcentagemLucro}%`);
        $row.find('td').eq(6).text(`R$ ${valorVenda}`);
        $row.find('td').eq(7).text(estoqueAtual);
        $row.find('td').eq(8).text(estoqueMinimo);

        $editarBtn.text('Editar');
        $(this).remove();
    });

    async function buscarNomeFornecedor(id) {
        try {
            const res = await fetch(`/fornecedores/busca-fornecedor-id-backend/${id}`); //
            const data = await res.json();
            return data.nomeFornecedor || 'Fornecedor não encontrado';
        } catch (err) {
            console.error(`Erro ao buscar fornecedor ${id}:`, err);
            return 'Erro ao buscar fornecedor';
        }
    }

</script>

</html>